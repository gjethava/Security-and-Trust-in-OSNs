from google.colab import drive
drive.mount('/content/drive')

import networkx as nx
import matplotlib.pyplot as plt
import numpy as np
import pandas as pd
import random

# loading soc-karate dataset 
g1=nx.read_pajek('/content/drive/MyDrive/Colab Notebooks/soc-karate.net')

print("soc-karate dataset statistics are as follows\n")
print(nx.info(g1))
print("Number of nodes:",nx.number_of_nodes(g1))
print("Number of edges:",nx.number_of_edges(g1))
print("Is network direcrected?", nx.is_directed(g1))
print("Density:",nx.density(g1))
print("Diameter:",nx.diameter(g1))
degree_sequence = sorted((d for n, d in g1.degree()), reverse=True)
dmax = max(degree_sequence)
dmin = min(degree_sequence)
print("Maximum degree:", dmax)
print("Minimum degree:", dmin)
print("Degrees of each nodes")
print(g1.degree())
print("Nodes in the network")
print(g1.nodes())
print("Edges in the network")
print(g1.edges())
#nx.draw(g1)
#plt.show()

# loading socfb-Bowdoin47 dataset 
g2=nx.read_pajek('/content/drive/MyDrive/Colab Notebooks/socfb-Bowdoin47.net')

print("socfb-Bowdoin47 dataset statistics are as follow\n")
print(nx.info(g2))
print("Number of nodes:",nx.number_of_nodes(g2))
print("Number of edges:",nx.number_of_edges(g2))
print("Is network direcrected?", nx.is_directed(g2))
print("Density:",nx.density(g2))
#print("Diameter:",nx.diameter(g2))
degree_sequence = sorted((d for n, d in g2.degree()), reverse=True)
dmax = max(degree_sequence)
dmin = min(degree_sequence)
print("Maximum degree:", dmax)
print("Minimum degree:", dmin)
print("Degrees of each nodes")
print(g2.degree())
print("Nodes in the network")
print(g2.nodes())
print("Edges in the network")
print(g2.edges())
#nx.draw(g2)
#plt.show()

# loading socfb-Brandeis99 dataset 
g3=nx.read_pajek('/content/drive/MyDrive/Colab Notebooks/socfb-Brandeis99.net')

print("socfb-Brandeis99 dataset statistics are as follows\n")
print(nx.info(g3))
print("Number of nodes:",nx.number_of_nodes(g3))
print("Number of edges:",nx.number_of_edges(g3))
print("Is network direcrected?", nx.is_directed(g3))
print("Density:",nx.density(g3))
#print("Diameter:",nx.diameter(g3))
degree_sequence = sorted((d for n, d in g3.degree()), reverse=True)
dmax = max(degree_sequence)
dmin = min(degree_sequence)
print("Maximum degree:", dmax)
print("Minimum degree:", dmin)
print("Degrees of each nodes")
print(g3.degree())
print("Nodes in the network")
print(g3.nodes())
print("Edges in the network")
print(g3.edges())
#nx.draw(g3)
#plt.show()

# loading soc-advogato dataset 
g4=nx.read_pajek('/content/drive/MyDrive/Colab Notebooks/soc-advogato.net')

print("soc-advogato dataset statistics are as follows\n")
print(nx.info(g4))
print("Number of nodes:",nx.number_of_nodes(g4))
print("Number of edges:",nx.number_of_edges(g4))
print("Is network direcrected?", nx.is_directed(g4))
print("Density:",nx.density(g4))
#print("Diameter:",nx.diameter(g4))
degree_sequence = sorted((d for n, d in g4.degree()), reverse=True)
dmax = max(degree_sequence)
dmin = min(degree_sequence)
print("Maximum degree:", dmax)
print("Minimum degree:", dmin)
print("Degrees of each nodes")
print(g4.degree())
print("Nodes in the network")
print(g4.nodes())
print("Edges in the network")
print(g4.edges())
#nx.draw(g4)
#plt.show()

# loading soc-epinions dataset 
g5=nx.read_pajek('/content/drive/MyDrive/Colab Notebooks/soc-epinions.net')

print("soc-epinions dataset statistics are as follows\n")
print(nx.info(g5))
print("Number of nodes:",nx.number_of_nodes(g5))
print("Number of edges:",nx.number_of_edges(g5))
print("Is network direcrected?", nx.is_directed(g5))
print("Density:",nx.density(g5))
#print("Diameter:",nx.diameter(g4))
degree_sequence = sorted((d for n, d in g5.degree()), reverse=True)
dmax = max(degree_sequence)
dmin = min(degree_sequence)
print("Maximum degree:", dmax)
print("Minimum degree:", dmin)
print("Degrees of each nodes")
print(g5.degree())
print("Nodes in the network")
print(g5.nodes())
print("Edges in the network")
print(g5.edges())
#nx.draw(g5)
#plt.show()
